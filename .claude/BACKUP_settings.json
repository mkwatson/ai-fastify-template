{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "cd \"$SESSION_WORKING_DIRECTORY\" && { [ -f .claude-last-check ] && [ $(( $(date +%s) - $(stat -f %m .claude-last-check 2>/dev/null || echo 0) )) -lt 5 ] && exit 0; touch .claude-last-check; timeout 10s pnpm ai:quick --silent 2>&1 | awk -F: -v M=3 '/[eE]rror|[wW]arning/ { if (count < M) { if (NF >= 3) print \"💡 \" $1 \":\" $2 \" - \" substr($0, index($0,$3)); else print \"💡 \" $0; count++; } } END { if (count == 0) print \"✅ No validation issues\"; }'; }"
          }
        ]
      },
      {
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "cd \"$SESSION_WORKING_DIRECTORY\" && { [[ \"$TOOL_FILE_PATH\" =~ \\.(ts|js|tsx|jsx)$ ]] && ! [[ \"$TOOL_FILE_PATH\" =~ (generated|vendor|node_modules) ]] && pnpm prettier --write \"$TOOL_FILE_PATH\" --log-level=error 2>/dev/null; [[ \"$TOOL_FILE_PATH\" =~ /backend-api/src/utils/ ]] && echo '🧬 Utils modified - mutation testing required (85% threshold)'; [[ \"$TOOL_FILE_PATH\" =~ (/test/|\\.test\\.ts$) ]] && echo '🧪 Test modified - ensure it validates business logic, not just coverage'; true; }"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"📝 Command: $TOOL_COMMAND\" >> \"$SESSION_TRANSCRIPT_PATH.commands.log\""
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "RESOLVED_PATH=$(cd \"$SESSION_WORKING_DIRECTORY\" && realpath -m \"$TOOL_FILE_PATH\" 2>/dev/null || echo \"$TOOL_FILE_PATH\"); if [[ \"$RESOLVED_PATH\" =~ \\.(env|secret) ]] || [[ \"$RESOLVED_PATH\" =~ /(secrets|credentials|private|keys)/ ]] || [[ \"$TOOL_FILE_PATH\" =~ \\.\\. ]]; then echo '🚨 BLOCKED: Direct env/secrets modification - use Zod schemas for env validation' && exit 1; fi"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "RESOLVED_PATH=$(cd \"$SESSION_WORKING_DIRECTORY\" && realpath -m \"$TOOL_FILE_PATH\" 2>/dev/null || echo \"$TOOL_FILE_PATH\"); if [[ \"$RESOLVED_PATH\" =~ /(node_modules|dist|build|coverage|.git|.nx|.turbo)/ ]] || [[ -L \"$TOOL_FILE_PATH\" ]]; then echo '🚨 BLOCKED: Cannot modify generated/system directories or symlinks' && exit 1; fi"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "cd \"$SESSION_WORKING_DIRECTORY\" && echo '📊 Session Summary:' && git status --short 2>/dev/null | head -10 && echo '' && git diff --stat 2>/dev/null | tail -5"
          }
        ]
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "cd \"$SESSION_WORKING_DIRECTORY\" && if git diff --quiet 2>/dev/null; then echo '✅ Working directory clean'; else echo '💡 Next steps:' && echo '  1. pnpm ci:check    # Validate changes' && echo '  2. git add -A      # Stage changes' && echo '  3. git commit      # Commit (hooks will validate)'; fi"
          }
        ]
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "if [ -f \"$SESSION_TRANSCRIPT_PATH.commands.log\" ]; then echo '' && echo '📜 Commands executed this session:' && tail -5 \"$SESSION_TRANSCRIPT_PATH.commands.log\" | sed 's/^/  /'; fi"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] $NOTIFICATION_MESSAGE\" >> \"$SESSION_TRANSCRIPT_PATH.notifications.log\""
          }
        ]
      }
    ]
  },
  "tools": {
    "enabled": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Bash",
      "TodoRead",
      "TodoWrite",
      "WebSearch",
      "WebFetch",
      "Grep",
      "Glob",
      "LS"
    ]
  }
}
