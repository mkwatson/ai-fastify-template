#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🏗️ Enterprise-Grade Quality Gates - Pre-Commit Validation"
echo "=================================================="

# Track timing for performance monitoring
start_time=$(date +%s)

# 1. Security Layer: Credential scanning with GitLeaks
echo "🔒 [1/8] Security: Scanning for credentials and secrets..."

# Ensure GitLeaks is installed before scanning
if ! command -v gitleaks &> /dev/null; then
  echo "🔧 GitLeaks not found, installing via enterprise script..."
  if [[ -f "scripts/install-gitleaks.sh" ]]; then
    if ! bash scripts/install-gitleaks.sh; then
      echo "❌ Failed to install GitLeaks. Please run 'bash scripts/install-gitleaks.sh' manually."
      exit 1
    fi
  else
    echo "❌ GitLeaks installation script not found. Please ensure scripts/install-gitleaks.sh exists."
    exit 1
  fi
fi

# Run GitLeaks security scan
if ! gitleaks detect --source=. --verbose --no-banner --no-git; then
  echo "❌ GitLeaks found potential credentials. Please review and fix."
  exit 1
fi

# 2. File Hygiene: Check for large files (1MB limit)
echo "📏 [2/8] File Hygiene: Checking for large files..."
if ! node scripts/check-file-size.js; then
  exit 1
fi

# 3. File Hygiene: Check for merge conflict markers
echo "⚔️ [3/8] File Hygiene: Checking for merge conflicts..."
if git diff --cached --name-only | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null; then
  echo "❌ Merge conflict markers found. Please resolve conflicts."
  exit 1
fi

# 4. Code Quality: Run lint-staged (ESLint + Prettier)
echo "🎨 [4/8] Code Quality: Running linting and formatting..."
if ! npx lint-staged; then
  echo "❌ Linting failed. Please fix issues."
  exit 1
fi

# 5. Type Safety: TypeScript type checking
echo "🔷 [5/8] Type Safety: Running TypeScript validation..."
if ! pnpm type-check; then
  echo "❌ TypeScript type checking failed. Please fix type errors."
  exit 1
fi

# 6. Test Suite: Run all tests for code confidence
echo "🧪 [6/8] Test Suite: Running comprehensive test validation..."
if ! pnpm test; then
  echo "❌ Tests failed. Please fix failing tests before committing."
  exit 1
fi

# 7. Security Audit: Check for known vulnerabilities
echo "🛡️ [7/8] Security Audit: Checking dependencies for vulnerabilities..."
if ! pnpm ai:security; then
  echo "❌ Security audit found vulnerabilities. Please review and fix."
  exit 1
fi

# 8. File Validation: YAML syntax (JSON handled by ESLint)
echo "📋 [8/9] File Validation: Validating YAML files..."
for file in $(git diff --cached --name-only | grep -E '\.(ya?ml)$'); do
  if [ -f "$file" ]; then
    if ! npx js-yaml "$file" >/dev/null 2>&1; then
      echo "❌ Invalid YAML file: $file"
      exit 1
    fi
  fi
done

# 9. GitHub Actions Validation: Workflow syntax checking
echo "🚀 [9/9] GitHub Actions: Validating workflow syntax..."
workflow_files=$(git diff --cached --name-only | grep -E '^\.github/workflows/.*\.ya?ml$' || true)
if [ -n "$workflow_files" ]; then
  if command -v actionlint &> /dev/null; then
    if ! actionlint $workflow_files; then
      echo "❌ GitHub Actions workflow validation failed. Please fix workflow syntax."
      exit 1
    fi
    echo "✅ GitHub Actions workflows validated successfully"
  else
    echo "⚠️ actionlint not found. Install with 'brew install actionlint' for workflow validation."
  fi
fi

# Performance monitoring
end_time=$(date +%s)
duration=$((end_time - start_time))

echo "=================================================="
echo "✅ All enterprise-grade quality gates passed!"
echo "🚀 Total validation time: ${duration}s"
echo "💯 Code is ready for production deployment"